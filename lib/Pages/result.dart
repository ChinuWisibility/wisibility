// Code Generated by Sidekick is for learning and experimentation purposes only.
import 'package:auto_size_text/auto_size_text.dart';
import 'package:fluent_ui/fluent_ui.dart';
import 'package:fl_chart/fl_chart.dart';

class CsvResultsPage extends StatelessWidget {
  final Map<String, dynamic> stats;
  final Map<String, List<String>> details;

  const CsvResultsPage({required this.stats, required this.details, super.key});

  @override
  Widget build(BuildContext context) {
    final ScrollController _scrollController = ScrollController();

    // Prepare detail boxes for the left column
    final List<_DetailBoxData> detailBoxData = [
      _DetailBoxData('Total User count', stats['Display Name']?.toString() ?? '0', details['AllUsers'] ?? []),
      _DetailBoxData('Inactive', stats['Status']?['Inactive']?.toString() ?? '0', details['InactiveUsers'] ?? []),
      _DetailBoxData('Active', stats['Status']?['Active']?.toString() ?? '0', details['ActiveUsers'] ?? []),
      _DetailBoxData('Unique Groups', stats['Group']?.toString() ?? '0', details['UniqueGroups'] ?? []),
      _DetailBoxData('Users expiry in next 7 days', stats['End Date']?.toString() ?? '0', details['ExpiringUsers'] ?? []),
      _DetailBoxData('Unique Managers', stats['Manager']?.toString() ?? '0', details['UniqueManagers'] ?? []),
      _DetailBoxData('Unique Departments', stats['Department']?.toString() ?? '0', details['UniqueDepartments'] ?? []),
    ];

// Your existing list
    final List<_IssueListData> allIssues = [
      _IssueListData('Active Status with Past End Dates', details['ActiveWithPastEndDate'] ?? []),
      _IssueListData('User with Inactive status with future end date', details['InactiveWithFutureEndDate'] ?? []),
      _IssueListData('User without Managers', details['NoManager'] ?? []),
      _IssueListData('User with missing Display Name', details['MissingDisplayName'] ?? []),
      _IssueListData('User with Missing Title', details['MissingTitle'] ?? []),
      _IssueListData('User with Missing Department', details['MissingDepartment'] ?? []),
      _IssueListData('User with No Status', details['NoStatus'] ?? []),
      _IssueListData('User who is having access to all Groups', details['AllGroups'] ?? []),
      _IssueListData('User who is having access to max Groups', details['MaxGroups'] ?? []),
      _IssueListData('User who is not having access to any groups', details['NoGroups'] ?? []),
      _IssueListData('Users with Special Characters in DisplayName', details['SpecialCharDisplayName'] ?? []),
    ];

// Split by count
    final List<_IssueListData> nonZeroIssues = allIssues.where((i) => i.users.isNotEmpty).toList()
      ..sort((a, b) => b.users.length.compareTo(a.users.length));

    final List<_IssueListData> zeroIssues = allIssues.where((i) => i.users.isEmpty).toList();


    return ScaffoldPage(
      header: const PageHeader(title: Text('CSV Analysis Results')),
      content: Container(     width: double.infinity,
        height: double.infinity,
        decoration: const ShapeDecoration(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(25.0),
              topRight: Radius.circular(25.0),
            ),
          ),
          color: Colors.white,
        ),
        child: Scrollbar(
          controller: _scrollController,
          child: SingleChildScrollView(
            controller: _scrollController,
            scrollDirection: Axis.vertical,
            child: Padding(
              padding: const EdgeInsets.all(18.0),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Left column
                  Expanded(
                    flex: 1,
                    child: Column(
                      children: [
                        PieChartSample(detailBoxData: detailBoxData),
                        const SizedBox(height: 32),
                        SizedBox(
                          height: 800,
                          child: GridView.count(
                            crossAxisCount: 3,
                            crossAxisSpacing: 16,
                            mainAxisSpacing: 16,
                            childAspectRatio: 1.7,
                            physics: const NeverScrollableScrollPhysics(),
                            children: detailBoxData
                                .map((data) => GestureDetector(
                              onTap: () => _showUserListPopup(context, data.title, data.users),
                              child: _DetailBox(title: data.title, count: data.count),
                            ))
                                .toList(),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(width: 32),
                  // Right column
                  Expanded(
                    flex: 1,
                    child: Container(
                      decoration: BoxDecoration(
                        color: Colors.grey[30],
                        borderRadius: BorderRadius.circular(18.0),
                      ),
                      child: Padding(
                        padding: const EdgeInsets.all(18.0),
                        child: ListView(
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          children: [
                            ...nonZeroIssues.map(
                                  (issue) => GestureDetector(
                                onTap: () => _showUserListPopup(context, issue.title, issue.users),
                                child: _IssueListTile(title: issue.title, users: issue.users),
                              ),
                            ),
                            if (zeroIssues.isNotEmpty) ...[
                              const SizedBox(height: 16),
                              const Divider(style: DividerThemeData(thickness: 2),),
                              const SizedBox(height: 8),
                              ...zeroIssues.map(
                                    (issue) => GestureDetector(
                                  onTap: () => _showUserListPopup(context, issue.title, issue.users),
                                  child: _IssueListTile(title: issue.title, users: issue.users),
                                ),
                              ),
                            ],
                          ],
                        ),

                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  void _showUserListPopup(BuildContext context, String title, List<String> users) {
    showDialog(
      context: context,
      builder: (context) => ContentDialog(
        title: Text(title),
        content: SizedBox(
          width: 350,
          height: 400,
          child: users.isEmpty
              ? const Center(child: Text('No users found.'))
              : ListView.builder(
            itemCount: users.length,
            itemBuilder: (context, idx) => ListTile(
              title: Text(users[idx]),
            ),
          ),
        ),
        actions: [
          Button(child: const Text('Close'), onPressed: () => Navigator.pop(context)),
        ],
      ),
    );
  }
}

class PieChartSample extends StatelessWidget {
  final List<_DetailBoxData> detailBoxData;

  const PieChartSample({required this.detailBoxData, super.key});

  @override
  Widget build(BuildContext context) {
    final total = detailBoxData.fold<double>(
      0,
          (sum, d) => sum + (double.tryParse(d.count) ?? 0.0),
    );

    return Column(
      children: [
        SizedBox(
          height: 400,
          width: 400,
          child: PieChart(
            PieChartData(
              sections: _getSections(total),
              centerSpaceRadius: 60,
              sectionsSpace: 1,
            ),
          ),
        ),
        const SizedBox(height: 16),
        // Custom Legend
        Wrap(
          spacing: 16,
          runSpacing: 8,
          children: detailBoxData.map((data) {
            final color = _getColor(data.title);
            final value = double.tryParse(data.count) ?? 0.0;
            final percent = total > 0 ? (value / total * 100).toStringAsFixed(1) : '0';
            return Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(width: 16, height: 16, color: color),
                const SizedBox(width: 6),
                Text('${data.title}: ${data.count} ($percent%)'),
              ],
            );
          }).toList(),
        ),
      ],
    );
  }

  List<PieChartSectionData> _getSections(double total) {
    return detailBoxData.map((data) {
      final value = double.tryParse(data.count) ?? 0.0;
      final percent = total > 0 ? (value / total * 100).toStringAsFixed(1) : '0';
      // Show percent inside the slice, but only if the slice is big enough
      final showLabel = value > 0 && (value / total) > 0.03; // Hide label for very small slices
      return PieChartSectionData(
        color: _getColor(data.title),
        value: value,
        title: showLabel ? '$percent%' : '',
        radius: 120,
        titleStyle: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white),
      );
    }).toList();
  }

  Color _getColor(String title) {
    switch (title) {
      case 'Total User count':
        return Colors.red;
      case 'Inactive':
        return Colors.orange;
      case 'Active':
        return Colors.green;
      case 'Unique Groups':
        return Colors.blue;
      case 'Users expiry in next 7 days':
        return Colors.purple;
      case 'Unique Managers':
        return Colors.yellow;
      case 'Unique Departments':
        return Colors.teal;
      default:
        return Colors.grey;
    }
  }
}

class _DetailBoxData {
  final String title;
  final String count;
  final List<String> users;

  _DetailBoxData(this.title, this.count, this.users);
}

class _DetailBox extends StatelessWidget {
  final String title;
  final String count;

  const _DetailBox({required this.title, required this.count, super.key});

  @override
  Widget build(BuildContext context) {
    return PhysicalModel(
      color: Colors.white,
      elevation: 16.0,
      borderRadius: BorderRadius.circular(20),
      clipBehavior: Clip.antiAlias,
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          border: Border.all(color: Colors.white),
          borderRadius: BorderRadius.circular(20),
        ),
        padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            AutoSizeText(
              title,
              style: const TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.w600,
              ),
              maxLines: 1,
              minFontSize: 8,
              overflow: TextOverflow.ellipsis,
            ),
            const SizedBox(height: 8),
            AutoSizeText(
              count,
              style: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
              maxLines: 1,
              minFontSize: 10,
              overflow: TextOverflow.ellipsis,
            ),
          ],
        ),
      ),
    );
  }
}


class _IssueListData {
  final String title;
  final List<String> users;

  _IssueListData(this.title, this.users);
}

class _IssueListTile extends StatelessWidget {
  final String title;
  final List<String> users;

  const _IssueListTile({required this.title, required this.users, super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 80,
      decoration: BoxDecoration(
        color: Colors.transparent, // <- make tile transparent
        borderRadius: BorderRadius.circular(18.0),
      ),
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Row(
          children: [
            CircleAvatar(
              backgroundColor: Colors.blue,
              child: Text(title.substring(0, 1).toUpperCase()),
            ),
            Expanded(
              flex: 2,
              child: Padding(
                padding: const EdgeInsets.only(left: 8.0),
                child: Text(
                  title,
                  style: const TextStyle(fontWeight: FontWeight.bold),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
              ),
            ),
            Expanded(
              flex: 1,
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 14.0),
                decoration: BoxDecoration(
                  color: Colors.white, // <-- background only for this
                  borderRadius: BorderRadius.circular(8.0),
                ),
                child: Center(
                  child: Text(
                    '${users.length} users',
                    style: const TextStyle(fontSize: 12),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

